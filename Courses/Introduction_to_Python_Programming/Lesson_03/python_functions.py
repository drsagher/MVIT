# -*- coding: utf-8 -*-
"""Python_Functions.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1n5r7zwjPFVA9s6k4pDR5pgDSvjmV-N8j
"""



"""# **Python Function**

A function is a block of code that performs a specific task and can be called multiple times from different parts of a program. Functions improve code organization, readability, and reusability.

* Regular Functions: Defined with the def keyword.
* Lambda Functions: Anonymous, single-expression functions.
* Recursive Functions: Functions that call themselves.
* Nested Functions: Functions defined inside other functions.

**Defining a Function**


```
def function_name(parameters):
    # Code block
    return value  # Optional
```
"""

# Greeting Function
def say_hello():
    print("Hello, World!")

say_hello()

# Functions with Parameters

def add_numbers(a, b):
    result = a + b
    print(f"Sum of {a} and {b} is {result}")

add_numbers(5, 3)

# Greeting with Default Name
def greet(name="Guest"):
    print(f"Hello, {name}!")

greet()          # Uses default value
greet("Alice")   # Uses provided value

# Order Details
def order_food(item, quantity=1):
    print(f"Ordered {quantity} {item}(s)")

order_food(quantity=2, item="pizza")

# Summing Multiple Numbers
def sum_numbers(*args):
    total = sum(args)
    print(f"Sum: {total}")

sum_numbers(1, 2, 3, 4)

# Keyword Arguments
def create_profile(**kwargs):
    for key, value in kwargs.items():
        print(f"{key}: {value}")

create_profile(name="Bob", age=30, city="New York")



"""**Return Statements**
The return statement sends a value back to the caller. If omitted, the function returns None.
"""

# Area of a Rectangle
def calculate_area(length, width):
    return length * width

area = calculate_area(5, 3)
print(f"Area: {area} square units")

"""**Lambda Functions**

Lambda functions are small, anonymous functions defined using the lambda keyword. They are limited to a single expression.


```
lambda arguments: expression
```


"""

square = lambda x: x * x
print(square(5))

"""**Recursive Functions**

A recursive function calls itself to solve a problem by breaking it into smaller instances.

Ensure a base case to prevent infinite recursion.

* Many problems have recursive structures (e.g., tree traversals, mathematical sequences).
* Converts iterative loops into elegant, readable code by reducing repetitive logic.
* Used in divide-and-conquer algorithms (e.g., Merge Sort, Quick Sort, Binary Search).
* Ideal for processing trees, linked lists, JSON hierarchies, and other nested structures.
* Recursion is the foundation of mathematical sequences (e.g., Fibonacci, Tower of Hanoi).
* Used in dynamic programming (with memoization to optimize repeated calculations).


### When to Avoid Recursion?
* Stack Overflow Risk: Deep recursion can exhaust call stack memory.
* Performance Overhead: Function calls are slower than loops in some languages.
* Complex Debugging: Recursive logic can be harder to trace than iterative loops.
"""

# Factorial
def factorial(n):
    if n == 0 or n == 1:  # Base case
        return 1
    return n * factorial(n - 1)  # Recursive case

print(factorial(5))

"""**Nested Functions**

Functions defined inside other functions are called nested functions, often used for encapsulation or helper functions.

Nested functions can access variables from their enclosing scope.
"""

def outer_function(msg):
    def inner_function():
        print(f"Message: {msg}")
    inner_function()

outer_function("Hello!")

"""**Practical Example: Shopping Cart Calculator**

This example combines multiple function concepts to calculate the total cost in a shopping cart.
"""

def calculate_total(items, discount_rate=0):
    total = sum(items.values())
    discount = total * discount_rate
    return total - discount

def print_receipt(customer, *items, **details):
    print(f"Receipt for {customer}:")
    for item, price in items:
        print(f"{item}: ${price}")
    total = calculate_total(details, discount_rate=details.get('discount', 0))
    print(f"Total: ${total:.2f}")

print_receipt("Alice", ("apple", 1), ("bread", 2), total=3, discount=0.1)

"""**Advanced Example: Temperature Converter**

This example uses functions to convert temperatures between Celsius, Fahrenheit, and Kelvin.
"""

def celsius_to_fahrenheit(celsius):
    return (celsius * 9/5) + 32

def fahrenheit_to_celsius(fahrenheit):
    return (fahrenheit - 32) * 5/9

def convert_temperature(value, unit):
    """Converts temperature between Celsius, Fahrenheit, and Kelvin."""
    unit = unit.lower()
    if unit == "celsius":
        return {
            "fahrenheit": celsius_to_fahrenheit(value),
            "kelvin": value + 273.15
        }
    elif unit == "fahrenheit":
        celsius = fahrenheit_to_celsius(value)
        return {
            "celsius": celsius,
            "kelvin": celsius + 273.15
        }
    elif unit == "kelvin":
        celsius = value - 273.15
        return {
            "celsius": celsius,
            "fahrenheit": celsius_to_fahrenheit(celsius)
        }
    else:
        return None

result = convert_temperature(25, "celsius")
print(f"25°C = {result['fahrenheit']:.2f}°F, {result['kelvin']:.2f}K")