# -*- coding: utf-8 -*-
"""TS_Lab001.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1RYQ8XnKuGS7boNMNSX6-HUUO_XXaXtJO

**Introduction to TensorFlow in Google Colab**

This lab introduces the basics of TensorFlow by building and training a simple neural network on the MNIST dataset (handwritten digit classification).

**Step 1: Set Up Colab Environment**
"""

# Install TensorFlow (skip if already installed)
!pip install tensorflow --upgrade

# Verify installation and GPU access
import tensorflow as tf
# print("TensorFlow version:", tf.__version__)
# print("GPU available:", tf.config.list_physical_devices('GPU'))

"""**Step 2: Load and Preprocess Data**"""

# Load MNIST dataset
mnist = tf.keras.datasets.mnist
(x_train, y_train), (x_test, y_test) = mnist.load_data()

# Normalize pixel values (0-255 â†’ 0-1)
x_train, x_test = x_train / 255.0, x_test / 255.0

# Add channel dimension (for Conv2D layers)
x_train = x_train[..., tf.newaxis]
x_test = x_test[..., tf.newaxis]

print("Training data shape:", x_train.shape)  # (60000, 28, 28, 1)

"""**Step 3: Build the Model**

A simple Convolutional Neural Network (CNN) for image classification:
"""

model = tf.keras.Sequential([
    # Feature extraction
    tf.keras.layers.Conv2D(32, 3, activation='relu', input_shape=(28, 28, 1)),
    tf.keras.layers.MaxPooling2D(),
    tf.keras.layers.Conv2D(64, 3, activation='relu'),
    tf.keras.layers.MaxPooling2D(),

    # Classifier
    tf.keras.layers.Flatten(),
    tf.keras.layers.Dense(128, activation='relu'),
    tf.keras.layers.Dense(10, activation='softmax')  # 10 classes (digits 0-9)
])

model.compile(
    optimizer='adam',
    loss='sparse_categorical_crossentropy',
    metrics=['accuracy']
)

model.summary()  # Visualize architecture

"""**Step 4: Train the Model**"""

# Train for 5 epochs
history = model.fit(
    x_train, y_train,
    epochs=5,
    validation_data=(x_test, y_test)
)

"""**Step 5: Evaluate and Predict**"""

# Evaluate on test data
test_loss, test_acc = model.evaluate(x_test, y_test, verbose=2)
print(f"\nTest accuracy: {test_acc:.4f}")

# Predict a sample image
import numpy as np
sample = x_test[0]  # First test image
prediction = model.predict(sample[np.newaxis, ...])
print("Predicted digit:", np.argmax(prediction))

"""**Step 6: Visualize Results**"""

import matplotlib.pyplot as plt

# Plot training history
plt.plot(history.history['accuracy'], label='accuracy')
plt.plot(history.history['val_accuracy'], label='val_accuracy')
plt.xlabel('Epoch')
plt.ylabel('Accuracy')
plt.legend()
plt.show()